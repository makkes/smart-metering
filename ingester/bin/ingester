#!/usr/bin/env python

import argparse
import logging
import os
import sys
from urllib import request
import shutil

import ingester
import ingester.weather
import ingester.database


def weather():
    print("ingesting weather data")
    db = ingester.database.DB(os.getenv("DB_HOST"), os.getenv("DB_PORT"), os.getenv(
        "DB_NAME"), os.getenv("DB_USER"), os.getenv("DB_PASSWORD"))
    ingester.weather.prepare_tables(db)
    data_file = ingester.weather.fetch_data()
    try:
        conn = db.connect()
        ingester.weather.insert_temps(data_file, conn)
    except Exception as e:
        print(f"error: {e}", file=sys.stderr)
    finally:
        conn.close()
        print(f"removing {data_file}")
        shutil.rmtree(os.path.dirname(data_file))


def bootstrap():
    db = ingester.database.DB(os.getenv("DB_HOST"), os.getenv("DB_PORT"), os.getenv(
        "DB_NAME"), os.getenv("DB_USER"), os.getenv("DB_PASSWORD"))
    db.init_version_table()


def readings():
    readings_url = os.getenv("READINGS_URL")
    (fname, _) = request.urlretrieve(readings_url)
    logging.info(fname)

    logging.info("processing CSV file...")
    db = ingester.database.DB(os.getenv("DB_HOST"), os.getenv(
        "DB_PORT"), os.getenv("DB_NAME"), os.getenv("DB_USER"), os.getenv("DB_PASSWORD"))
    conn = db.connect()
    ingester.prepare_tables(conn)
    ingester.ingest(fname, conn)
    ingester.update_per_day_consumption(conn)
    conn.close()


logging.basicConfig(level=logging.INFO, format="%(asctime)s %(message)s")
parser = argparse.ArgumentParser(description="test")
sub_parsers = parser.add_subparsers(dest="command")
sub_parsers.add_parser("weather", help="ingest weather data")
sub_parsers.add_parser(
    "readings", help="ingest most recent readings from sensor")
sub_parsers.add_parser(
    "bootstrap", help="bootstrap the database. Must be run before any other commands.")
args = parser.parse_args()

match args.command:
    case "weather":
        weather()
    case "readings":
        readings()
    case "bootstrap":
        bootstrap()
    case _:
        sys.exit(f"unknown command {args.command}")
